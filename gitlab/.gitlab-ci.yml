stages:
  - test
  - build

default:
  image:
    name: node:16-alpine
    # 本地存在不拉取
    pull_policy: if-not-present
  before_script:
    - node -v
    - npm -v
    - yarn -v
  after_script:
    - echo "after_script."

.common:
  script:
    - echo "common."



cache: &global_cache
  # key 用来指定同一种缓存
  # CI_COMMIT_REF_SLUG 分支名称，就是按分支缓存
  # CI_COMMIT_REF_SLUG+CI_JOB_NAME 分支中没一个job进行缓存
  # key: $CI_COMMIT_REF_SLUG
  key:
    # files 中文件改变自动更新缓存
    files:
      - yarn.lock
      - package.json
      # 缓存前缀
    prefix: $CI_COMMIT_REF_SLUG
  # 要缓存的目录或文件
  paths:
    - node_modules/
  # 策略
  # pull-push: 拉取缓存
  # pull: 只拉缓存，依赖缓存不更新缓存
  # push: 只更新缓存，不依赖缓存
  policy: pull-push


install:
  stage: .pre
  script:
    - if [ ! -d node_modules ]; then yarn install --immutable; fi
  cache:
    <<: *global_cache
  rules:
    - changes:
        - yarn.lock
    # 在 job 中使用 cache
test:
  stage: test
  extends: .common
  cache:
    # 继承全局配置
    <<: *global_cache
    policy: pull
  #  # artifacts 下载工件
  #  artifacts:
  #    # 名字
  #    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
  #    # 要下载路径
  #    paths:
  #      - README.md
  #    # 过期时间
  #    expire_in: 1 week
  #    # 排除文件
  #    exclude:
  #      - binaries/**/*.o
  script:
    - npm run test

build:
  stage: build
  cache:
    # 继承全局配置
    <<: *global_cache
    # 覆盖 policy
    policy: pull
  script:
    - npm run test
  environment:
    name: production

